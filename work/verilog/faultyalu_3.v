/*
   This file was generated automatically by the Mojo IDE version B1.3.2.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module faultyalu_3 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] c,
    output reg [10:0] out
  );
  
  
  
  wire [11-1:0] M_arithmetic_out;
  reg [8-1:0] M_arithmetic_a;
  reg [8-1:0] M_arithmetic_b;
  reg [2-1:0] M_arithmetic_c;
  arithmetic_9 arithmetic (
    .a(M_arithmetic_a),
    .b(M_arithmetic_b),
    .c(M_arithmetic_c),
    .out(M_arithmetic_out)
  );
  
  wire [8-1:0] M_boolean_out;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  reg [4-1:0] M_boolean_c;
  boolean_10 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .c(M_boolean_c),
    .out(M_boolean_out)
  );
  
  wire [8-1:0] M_shifter_out;
  reg [8-1:0] M_shifter_a;
  reg [8-1:0] M_shifter_b;
  reg [2-1:0] M_shifter_c;
  shifter_11 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .c(M_shifter_c),
    .out(M_shifter_out)
  );
  
  wire [8-1:0] M_comp_out;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_v;
  reg [1-1:0] M_comp_n;
  reg [2-1:0] M_comp_c;
  comp_12 comp (
    .z(M_comp_z),
    .v(M_comp_v),
    .n(M_comp_n),
    .c(M_comp_c),
    .out(M_comp_out)
  );
  
  always @* begin
    M_arithmetic_a = a;
    M_arithmetic_b = b;
    M_arithmetic_c = c[0+1-:2];
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_c = c[0+3-:4];
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_c = c[0+1-:2];
    M_comp_z = M_arithmetic_out[10+0-:1];
    M_comp_v = M_arithmetic_out[9+0-:1];
    M_comp_n = M_arithmetic_out[8+0-:1];
    M_comp_c = c[1+1-:2];
    
    case (c[4+1-:2])
      2'h0: begin
        out[0+7-:8] = M_arithmetic_out[0+7-:8];
      end
      2'h1: begin
        out[0+7-:8] = M_boolean_out[0+7-:8];
      end
      2'h2: begin
        out[0+7-:8] = M_shifter_out[0+7-:8];
      end
      2'h3: begin
        out[0+7-:8] = M_comp_out[0+7-:8];
      end
    endcase
    out[0+0-:1] = 1'h1;
    out[8+2-:3] = M_arithmetic_out[8+2-:3];
  end
endmodule
