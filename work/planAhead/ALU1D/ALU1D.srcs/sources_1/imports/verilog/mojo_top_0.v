/*
   This file was generated automatically by the Mojo IDE version B1.3.2.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [7-1:0] M_seven_seg;
  wire [4-1:0] M_seven_sel;
  reg [1-1:0] M_seven_clk;
  reg [1-1:0] M_seven_rst;
  reg [16-1:0] M_seven_values;
  multi_seven_seg_1 seven (
    .clk(M_seven_clk),
    .rst(M_seven_rst),
    .values(M_seven_values),
    .seg(M_seven_seg),
    .sel(M_seven_sel)
  );
  
  wire [11-1:0] M_alu_out;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_c;
  alu_2 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .c(M_alu_c),
    .out(M_alu_out)
  );
  
  wire [11-1:0] M_faultyalu_out;
  reg [8-1:0] M_faultyalu_a;
  reg [8-1:0] M_faultyalu_b;
  reg [6-1:0] M_faultyalu_c;
  faultyalu_3 faultyalu (
    .a(M_faultyalu_a),
    .b(M_faultyalu_b),
    .c(M_faultyalu_c),
    .out(M_faultyalu_out)
  );
  
  wire [12-1:0] M_tester_out;
  wire [8-1:0] M_tester_outa;
  wire [8-1:0] M_tester_outb;
  wire [8-1:0] M_tester_outc;
  reg [1-1:0] M_tester_clk;
  reg [1-1:0] M_tester_rst;
  reg [1-1:0] M_tester_faulty;
  tester_4 tester (
    .clk(M_tester_clk),
    .rst(M_tester_rst),
    .faulty(M_tester_faulty),
    .out(M_tester_out),
    .outa(M_tester_outa),
    .outb(M_tester_outb),
    .outc(M_tester_outc)
  );
  
  reg [11:0] dispout;
  
  reg [7:0] dispa;
  
  reg [7:0] dispb;
  
  reg [7:0] dispc;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu_a = io_dip[0+0+7-:8];
    M_alu_b = io_dip[8+0+7-:8];
    M_alu_c = io_dip[16+0+5-:6];
    M_faultyalu_a = io_dip[0+0+7-:8];
    M_faultyalu_b = io_dip[8+0+7-:8];
    M_faultyalu_c = io_dip[16+0+5-:6];
    M_tester_clk = clk;
    M_tester_rst = rst;
    M_tester_faulty = io_dip[16+6+0-:1];
    M_seven_clk = clk;
    M_seven_rst = rst;
    M_seven_values = 16'heeee;
    if (io_dip[16+7+0-:1] == 1'h0) begin
      if (io_dip[16+6+0-:1] == 1'h0) begin
        dispout[0+10-:11] = M_alu_out[0+10-:11];
      end else begin
        dispout[0+10-:11] = M_faultyalu_out[0+10-:11];
      end
      dispout[11+0-:1] = 1'h0;
      dispa = io_dip[0+0+7-:8];
      dispb = io_dip[8+0+7-:8];
      dispc = io_dip[16+0+7-:8];
    end else begin
      dispout[0+11-:12] = M_tester_out[0+11-:12];
      dispa = M_tester_outa;
      dispb = M_tester_outb;
      dispc = M_tester_outc;
    end
    io_led[0+0+7-:8] = dispa;
    io_led[8+0+7-:8] = dispb;
    io_led[16+0+7-:8] = dispout[0+7-:8];
    led[0+5-:6] = dispc[0+5-:6];
    led[7+0-:1] = io_dip[16+7+0-:1];
    led[6+0-:1] = io_dip[16+6+0-:1];
    if (dispout[11+0-:1] == 1'h1) begin
      M_seven_values[12+3-:4] = 4'hd;
    end
    if (dispout[10+0-:1] == 1'h1) begin
      M_seven_values[8+3-:4] = 4'hc;
    end
    if (dispout[9+0-:1] == 1'h1) begin
      M_seven_values[4+3-:4] = 4'hb;
    end
    if (dispout[8+0-:1] == 1'h1) begin
      M_seven_values[0+3-:4] = 4'ha;
    end
    io_seg = ~M_seven_seg;
    io_sel = ~M_seven_sel;
  end
endmodule
