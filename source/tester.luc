module tester (
    input clk,
    input rst,
    input faulty,
    output out[12],
    output outa[8],
    output outb[8],
    output outc[8]
  ) {
  
  
  alu alu;
  faultyalu faultyalu;
  sig a[32][8];
  sig b[32][8];
  sig c[32][6];
  sig d[32][11];
  sig aluout[11];
  
  counter count(#SIZE(5), .clk(clk), .rst(rst), #DIV(24));




 
  always {
  //         0              1              2               3             4               5              6             7                                             10                                                                            15                                                                      20                                                     
    a = {8b00000000  ,  8b11000000  ,  8b01000000  ,  8b11000000  ,  8b11111111  ,  8b00000000  ,  8b11000000  ,  8b01000000  ,  8b11111111  ,  8b00000000  ,  8b10000000  ,  8b11000000  ,  8b10111111  ,  8b01111111  ,  8b00000000  ,  8b10000000  ,  8b10000000  ,  8b00000010  ,  8b00000010  ,  8b0000111  ,  8b00001010  ,  8b00001010  ,  8b00001010  ,  8b00001010  ,  8b00001010  ,  8b10010101  ,  8b10010101  ,  8b10010101  ,  8b10001000  ,  8b00000000  ,  8b11000000  ,  8b00000000}; //input a
    b = {8b00000000  ,  8b01000000  ,  8b11000000  ,  8b11000000  ,  8b11111111  ,  8b11111111  ,  8b11000001  ,  8b01000000  ,  8b00000000  ,  8b11111111  ,  8b10000001  ,  8b11000001  ,  8b01000000  ,  8b10000001  ,  8b10000001  ,  8b00000001  ,  8b10000000  ,  8b00000000  ,  8b00000001  ,  8b0000111  ,  8b00001100  ,  8b00001100  ,  8b00001100  ,  8b00001100  ,  8b00001100  ,  8b00000010  ,  8b00000010  ,  8b00000010  ,  8b10001000  ,  8b01000000  ,  8b00000000  ,  8b00000000}; //input b
    c = {6b000000   ,   6b000000   ,   6b000000   ,   6b000000   ,   6b000000   ,   6b000000   ,   6b000000   ,   6b000000   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000001   ,   6b000010   ,   6b000010   ,   6b000010   ,   6b000010   ,   6b011000   ,   6b011010   ,   6b010110   ,   6b011110   ,   6b010111   ,   6b100000   ,   6b100001   ,   6b100011   ,   6b110011   ,   6b110101   ,   6b110101   ,   6b110111}; //opcode
    d = {11b10000000000,11b10000000000,11b10000000000,11b00110000000,11b00111111110,11b00111111111,11b00110000001,11b01110000000,11b00111111111,11b00000000001,11b00111111111,11b00111111111,11b01001111111,11b01111111110,11b00001111111,11b01001111111,11b11000000000,11b00000000000,11b00000010,11b00000110001,11b00000001000,11b00000001010,11b00000000110,11b00000001110,11b00111110111,11b00101010100,11b00100100101,11b00111100101,11b10000000001,11b00100000001,11b00100000001,11b10000000001}; //expected output
       
    out[11] = 0;
    
    alu.a = a[count.value];
    alu.b = b[count.value];
    alu.c = c[count.value];
    
    faultyalu.a = a[count.value];
    faultyalu.b = b[count.value];
    faultyalu.c = c[count.value];
    
    if (faulty == 0){
      aluout = alu.out;
    }
    else{
      aluout = faultyalu.out;
    }
    
    if(aluout == d[count.value]){
      out[11] = 1;
    }
    
    out[10:0] = aluout[10:0];
    outa = a[count.value];
    outb = b[count.value];
    outc = c[count.value];
  }
}
